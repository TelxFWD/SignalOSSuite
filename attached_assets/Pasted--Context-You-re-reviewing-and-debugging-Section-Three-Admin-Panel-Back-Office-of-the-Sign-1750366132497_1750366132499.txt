🧠 Context:
You’re reviewing and debugging **Section Three: Admin Panel (Back Office)** of the SignalOS project. This admin interface manages users, licenses, system monitoring, signal parser training, and real-time user health. The system is built on Flask/FastAPI with role-based controls and connects to the same backend as the User Dashboard.

🎯 Objective:
1. Detect and fix bugs, broken functions, or misaligned UI in the Admin Panel
2. Verify integration with backend APIs, database, and user dashboard
3. Identify and implement any missing or partially implemented features from the roadmap
4. Ensure Telegram-based notifications and confirmation prompts are functioning

---

📋 Modules & Features to Validate and Debug:

1. ✅ **User Management**
   - CRUD users (Create, Read, Update, Delete)
   - Status toggles (ban, activate, license expiry alerts)
   - Role-based access control

2. ✅ **License & Plan Controls**
   - Assign plans, downgrade expired licenses
   - Plan features toggled correctly (e.g. disable Pro-only views)

3. ✅ **Parser Training & Model Versioning**
   - Upload .json training data
   - Trigger model training
   - Push updates to users, rollback previous versions
   - View accuracy, logs, model status

4. ✅ **Signal Pipeline Debugger**
   - Show full lifecycle: signal → parser → MT5 JSON → EA status
   - Allow replaying, marking as failed, or correcting signal result

5. ✅ **Global Rule Manager**
   - Assign default strategy bundles
   - Push changes across users or groups

6. ✅ **Provider Tools**
   - Branded profile uploads
   - Provider performance analytics: TP hit %, delay, SL accuracy

7. ✅ **System Health**
   - View logs of EA heartbeat, parser sync, signal errors
   - Show user-by-user status: online/offline, outdated config

8. ✅ **Telegram Notification & Confirmation**
   - Telegram bot sends alerts to users on:
     - Signal failed
     - Telegram session expired
     - EA not responding
     - Confirmation required (e.g. high risk trade)
   - Confirmation prompt accepted/denied via Telegram
   - Logs confirmation response in admin panel

---

🔍 Bug Detection Focus:
- [ ] Broken UI (unresponsive buttons, loading states)
- [ ] API call failures or missing backend handlers
- [ ] Missing toast/success/error indicators
- [ ] Database writes that don’t persist
- [ ] Notifications not triggering or not arriving in Telegram
- [ ] Signals not linked correctly to user or provider

---

📦 Output:
- ✅ List of detected and fixed bugs
- ✅ List of completed or missing features
- ✅ Screenshots of functional Telegram confirmations
- ✅ Screenshot of parser push version flow
- ✅ Confirmation that logs, model upload, and user management are stable

🛠 Tech Notes:
- Test confirmation logic with a test bot token
- Log each feature completion with `console.info('✅ Feature X verified')`

---

🎯 End Goal:
A fully working, production-ready Admin Panel capable of running the entire SignalOS backend system with live feedback, real-time user notifications, and easy management of parsing, execution, and scaling.
